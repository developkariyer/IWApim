1731792441
f307d35ba477bbb000a896e1920eeee6-phpdoc%3A14a6ada3eaff3309ae1e8d2e988fe6bd-2a9f286e7db08a2a511de2898bcd5dcf
s:17700:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjI0OiJFdHN5QmFja2VuZENvbm5lY3Rvci5waHAiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaGFzaCI7czozMjoiMmE5ZjI4NmU3ZGIwOGEyYTUxMWRlMjg5OGJjZDVkY2YiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo0NToiTWFya2V0cGxhY2VDb25uZWN0b3IvRXRzeUJhY2tlbmRDb25uZWN0b3IucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czoxMjMzNjoiPD9waHAKCgovKgpUaGlzIGNvZGUgcnVucyBpbiByZW1vdGUgRXRzeSB3b3Jrc3RhdGlvbnMgb25seS4gUHV0IGhlcmUgZm9yIHJlZmVyZW5jZS4KCjw/cGhwCgpmdW5jdGlvbiBnZW5lcmF0ZUNvZGVWZXJpZmllcigkbGVuZ3RoID0gMTI4KSB7CiAgICByZXR1cm4gYmluMmhleChyYW5kb21fYnl0ZXMoJGxlbmd0aCAvIDIpKTsKfQoKZnVuY3Rpb24gZ2VuZXJhdGVDb2RlQ2hhbGxlbmdlKCRjb2RlVmVyaWZpZXIpIHsKICAgIHJldHVybiBydHJpbShzdHJ0cihiYXNlNjRfZW5jb2RlKGhhc2goJ3NoYTI1NicsICRjb2RlVmVyaWZpZXIsIHRydWUpKSwgJysvJywgJy1fJyksICc9Jyk7Cn0KCmZ1bmN0aW9uIGluaXRPYXV0aCgkc2hvcElkKSB7CiAgICAkZXRzeURhdGEgPSBmaWxlX2V4aXN0cygiZXRzeV97JHNob3BJZH0uanNvbiIpID8ganNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoImV0c3lfeyRzaG9wSWR9Lmpzb24iKSwgdHJ1ZSkgOiBbXTsKCiAgICAkY2xpZW50SWQgPSByZWFkbGluZSgiRW50ZXIgQ2xpZW50IElEICgiIC4gKCRldHN5RGF0YVsnY2xpZW50X2lkJ10gPz8gJ25vbmUnKSAuICIpOiAiKTsKICAgICRjbGllbnRTZWNyZXQgPSByZWFkbGluZSgiRW50ZXIgQ2xpZW50IFNlY3JldCAoIiAuICgkZXRzeURhdGFbJ2NsaWVudF9zZWNyZXQnXSA/PyAnbm9uZScpIC4gIik6ICIpOwogICAgJGNsaWVudElkID0gIWVtcHR5KCRjbGllbnRJZCkgPyAkY2xpZW50SWQgOiAoJGV0c3lEYXRhWydjbGllbnRfaWQnXSA/PyAnJyk7CiAgICAkY2xpZW50U2VjcmV0ID0gIWVtcHR5KCRjbGllbnRTZWNyZXQpID8gJGNsaWVudFNlY3JldCA6ICgkZXRzeURhdGFbJ2NsaWVudF9zZWNyZXQnXSA/PyAnJyk7CiAgICAkZXRzeURhdGFbJ2NsaWVudF9pZCddID0gJGNsaWVudElkOwogICAgJGV0c3lEYXRhWydjbGllbnRfc2VjcmV0J10gPSAkY2xpZW50U2VjcmV0OwogICAgJGNvZGVWZXJpZmllciA9IGdlbmVyYXRlQ29kZVZlcmlmaWVyKCk7CiAgICAkZXRzeURhdGFbJ2NvZGVfdmVyaWZpZXInXSA9ICRjb2RlVmVyaWZpZXI7CiAgICAkY29kZUNoYWxsZW5nZSA9IGdlbmVyYXRlQ29kZUNoYWxsZW5nZSgkY29kZVZlcmlmaWVyKTsKICAgICRyZWRpcmVjdFVyaSA9IHJlYWRsaW5lKCJFbnRlciBSZWRpcmVjdCBVUkkgKCIgLiAoJGV0c3lEYXRhWydyZWRpcmVjdF91cmknXSA/PyAnbm9uZScpIC4gIik6ICIpOwogICAgJHJlZGlyZWN0VXJpID0gIWVtcHR5KCRyZWRpcmVjdFVyaSkgPyAkcmVkaXJlY3RVcmkgOiAoJGV0c3lEYXRhWydyZWRpcmVjdF91cmknXSA/PyAnJyk7CiAgICAkZXRzeURhdGFbJ3JlZGlyZWN0X3VyaSddID0gJHJlZGlyZWN0VXJpOwoKICAgIGZpbGVfcHV0X2NvbnRlbnRzKCJldHN5X3skc2hvcElkfS5qc29uIiwganNvbl9lbmNvZGUoJGV0c3lEYXRhLCBKU09OX1BSRVRUWV9QUklOVCkpOwoKICAgIC8vIEdlbmVyYXRlIHRoZSBhdXRob3JpemF0aW9uIFVSTAogICAgJHNjb3BlID0gdXJsZW5jb2RlKCd0cmFuc2FjdGlvbnNfciBsaXN0aW5nc19yIHNob3BzX3InKTsKICAgICRzdGF0ZSA9IGJpbjJoZXgocmFuZG9tX2J5dGVzKDE2KSk7IC8vIEdlbmVyYXRlIGEgcmFuZG9tIHN0YXRlIGZvciBDU1JGIHByb3RlY3Rpb24KICAgICRhdXRoVXJsID0gImh0dHBzOi8vd3d3LmV0c3kuY29tL29hdXRoL2Nvbm5lY3Q/cmVzcG9uc2VfdHlwZT1jb2RlJmNsaWVudF9pZD17JGNsaWVudElkfSZyZWRpcmVjdF91cmk9IiAuIHVybGVuY29kZSgkcmVkaXJlY3RVcmkpIC4gIiZzY29wZT17JHNjb3BlfSZjb2RlX2NoYWxsZW5nZT17JGNvZGVDaGFsbGVuZ2V9JmNvZGVfY2hhbGxlbmdlX21ldGhvZD1TMjU2JnN0YXRlPXskc3RhdGV9IjsKCiAgICAvLyBPdXRwdXQgdGhlIGF1dGhvcml6YXRpb24gVVJMIGFuZCBhc2sgZm9yIHRoZSBhdXRob3JpemF0aW9uIGNvZGUKICAgIGVjaG8gIlN0YXRlOiAkc3RhdGVcbiI7CiAgICBlY2hvICJWaXNpdCB0aGUgZm9sbG93aW5nIFVSTCB0byBhdXRob3JpemUgdGhlIGFwcDpcblxuJGF1dGhVcmxcblxuIjsKCiAgICAvLyBBc2sgdGhlIHVzZXIgdG8gaW5wdXQgdGhlIGZ1bGwgcmVkaXJlY3QgVVJMIGFmdGVyIGF1dGhvcml6YXRpb24KICAgICRhdXRoUmVzcG9uc2UgPSByZWFkbGluZSgiRW50ZXIgdGhlIGZ1bGwgcmVkaXJlY3QgVVJMIGFmdGVyIGF1dGhvcml6YXRpb24gKGJlZ2lucyB3aXRoIHskZXRzeURhdGFbJ3JlZGlyZWN0X3VyaSddfSk6ICIpOwoKICAgIC8vIEV4dHJhY3QgdGhlIGF1dGhvcml6YXRpb24gY29kZSBhbmQgc3RhdGUgZnJvbSB0aGUgcmVzcG9uc2UgVVJMCiAgICAkdXJsUGFydHMgPSBwYXJzZV91cmwoJGF1dGhSZXNwb25zZSk7CiAgICBwYXJzZV9zdHIoJHVybFBhcnRzWydxdWVyeSddLCAkcXVlcnlQYXJhbXMpOwoKICAgICRhdXRoQ29kZSA9ICRxdWVyeVBhcmFtc1snY29kZSddID8/IG51bGw7CiAgICAkcmV0dXJuZWRTdGF0ZSA9ICRxdWVyeVBhcmFtc1snc3RhdGUnXSA/PyBudWxsOwoKICAgIGlmICgkYXV0aENvZGUgJiYgJHJldHVybmVkU3RhdGUgPT09ICRzdGF0ZSkgewogICAgICAgIGVjaG8gIkF1dGhvcml6YXRpb24gc3VjY2Vzc2Z1bC4gQ29kZTogJGF1dGhDb2RlXG4iOwoKICAgICAgICAvLyBTdG9yZSB0aGUgYXV0aG9yaXphdGlvbiBjb2RlIGluIHRoZSBKU09OIGZpbGUKICAgICAgICAkZXRzeURhdGFbJ2F1dGhvcml6YXRpb25fY29kZSddID0gJGF1dGhDb2RlOwogICAgICAgIGZpbGVfcHV0X2NvbnRlbnRzKCJldHN5X3skc2hvcElkfS5qc29uIiwganNvbl9lbmNvZGUoJGV0c3lEYXRhLCBKU09OX1BSRVRUWV9QUklOVCkpOwoKICAgICAgICBlY2hvICJBdXRob3JpemF0aW9uIGNvZGUgc2F2ZWQgc3VjY2Vzc2Z1bGx5LlxuIjsKICAgIH0gZWxzZSB7CiAgICAgICAgZWNobyAiQXV0aG9yaXphdGlvbiBmYWlsZWQgb3Igc3RhdGUgbWlzbWF0Y2guXG4iOwogICAgICAgIGV4aXQ7CiAgICB9Cn0KCmZ1bmN0aW9uIGluaXQoJHNob3BJZCkgewogICAgJGV0c3lEYXRhID0ganNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoImV0c3lfeyRzaG9wSWR9Lmpzb24iKSwgdHJ1ZSk7CiAgICBpZiAoZW1wdHkoJGV0c3lEYXRhWydhdXRob3JpemF0aW9uX2NvZGUnXSkpIHsKICAgICAgICBpbml0T2F1dGgoJHNob3BJZCk7CiAgICB9CiAgICAvLyBDaGVjayBpZiB0aGUgYWNjZXNzIHRva2VuIGlzIGV4cGlyZWQgb3Igbm90IHNldAogICAgaWYgKGVtcHR5KCRldHN5RGF0YVsnYWNjZXNzX3Rva2VuJ10pIHx8IHRpbWUoKSA+ICgkZXRzeURhdGFbJ2NyZWF0ZWRfYXQnXSA/PyAwKSArICgkZXRzeURhdGFbJ2V4cGlyZXNfaW4nXSA/PyAwKSkgewogICAgICAgIGlmIChlbXB0eSgkZXRzeURhdGFbJ2FjY2Vzc190b2tlbiddKSkgewogICAgICAgICAgICAvLyBFeGNoYW5nZSB0aGUgYXV0aG9yaXphdGlvbiBjb2RlIGZvciBhbiBhY2Nlc3MgdG9rZW4KICAgICAgICAgICAgJGNoID0gY3VybF9pbml0KCk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsICJodHRwczovL2FwaS5ldHN5LmNvbS92My9wdWJsaWMvb2F1dGgvdG9rZW4iKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCAxKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1QsIDEpOwogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVEZJRUxEUywgaHR0cF9idWlsZF9xdWVyeShbCiAgICAgICAgICAgICAgICAnZ3JhbnRfdHlwZScgPT4gJ2F1dGhvcml6YXRpb25fY29kZScsCiAgICAgICAgICAgICAgICAnY2xpZW50X2lkJyA9PiAkZXRzeURhdGFbJ2NsaWVudF9pZCddLAogICAgICAgICAgICAgICAgJ2NsaWVudF9zZWNyZXQnID0+ICRldHN5RGF0YVsnY2xpZW50X3NlY3JldCddLAogICAgICAgICAgICAgICAgJ2NvZGUnID0+ICRldHN5RGF0YVsnYXV0aG9yaXphdGlvbl9jb2RlJ10sCiAgICAgICAgICAgICAgICAncmVkaXJlY3RfdXJpJyA9PiAkZXRzeURhdGFbJ3JlZGlyZWN0X3VyaSddLAogICAgICAgICAgICAgICAgJ2NvZGVfdmVyaWZpZXInID0+ICRldHN5RGF0YVsnY29kZV92ZXJpZmllciddCiAgICAgICAgICAgIF0pKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBIRUFERVIsIFsKICAgICAgICAgICAgICAgICJ4LWFwaS1rZXk6IHskZXRzeURhdGFbJ2NsaWVudF9pZCddfSIKICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICRyZXNwb25zZSA9IGN1cmxfZXhlYygkY2gpOwogICAgICAgICAgICAkaHR0cENvZGUgPSBjdXJsX2dldGluZm8oJGNoLCBDVVJMSU5GT19IVFRQX0NPREUpOwogICAgICAgICAgICAkY3VybEVycm9yID0gY3VybF9lcnJvcigkY2gpOwogICAgICAgICAgICBpZiAoJGh0dHBDb2RlID09PSAyMDApIHsKICAgICAgICAgICAgICAgICRkYXRhID0ganNvbl9kZWNvZGUoJHJlc3BvbnNlLCB0cnVlKTsKICAgICAgICAgICAgICAgICRldHN5RGF0YVsnYWNjZXNzX3Rva2VuJ10gPSAkZGF0YVsnYWNjZXNzX3Rva2VuJ107CiAgICAgICAgICAgICAgICAkZXRzeURhdGFbJ3JlZnJlc2hfdG9rZW4nXSA9ICRkYXRhWydyZWZyZXNoX3Rva2VuJ107CiAgICAgICAgICAgICAgICAkZXRzeURhdGFbJ2V4cGlyZXNfaW4nXSA9ICRkYXRhWydleHBpcmVzX2luJ107CiAgICAgICAgICAgICAgICAkZXRzeURhdGFbJ2NyZWF0ZWRfYXQnXSA9IHRpbWUoKTsKICAgICAgICAgICAgICAgIGVjaG8gIkFjY2VzcyB0b2tlbiBhY3F1aXJlZC5cbiI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBlY2hvICJFcnJvciBhY3F1aXJpbmcgdG9rZW46ICRodHRwQ29kZVxuIjsKICAgICAgICAgICAgICAgIGVjaG8gIlJlc3BvbnNlOiAkcmVzcG9uc2VcbiI7CiAgICAgICAgICAgICAgICBlY2hvICJjVVJMIGVycm9yOiAkY3VybEVycm9yXG4iOwogICAgICAgICAgICAgICAgZXhpdDsKICAgICAgICAgICAgfQogICAgICAgICAgICBjdXJsX2Nsb3NlKCRjaCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gUmVmcmVzaCB0aGUgYWNjZXNzIHRva2VuCiAgICAgICAgICAgICRjaCA9IGN1cmxfaW5pdCgpOwogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAiaHR0cHM6Ly9hcGkuZXRzeS5jb20vdjMvcHVibGljL29hdXRoL3Rva2VuIik7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NULCAxKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1RGSUVMRFMsIGh0dHBfYnVpbGRfcXVlcnkoWwogICAgICAgICAgICAgICAgJ2dyYW50X3R5cGUnID0+ICdyZWZyZXNoX3Rva2VuJywKICAgICAgICAgICAgICAgICdjbGllbnRfaWQnID0+ICRldHN5RGF0YVsnY2xpZW50X2lkJ10sCiAgICAgICAgICAgICAgICAnY2xpZW50X3NlY3JldCcgPT4gJGV0c3lEYXRhWydjbGllbnRfc2VjcmV0J10sCiAgICAgICAgICAgICAgICAncmVmcmVzaF90b2tlbicgPT4gJGV0c3lEYXRhWydyZWZyZXNoX3Rva2VuJ10KICAgICAgICAgICAgXSkpOwogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgWwogICAgICAgICAgICAgICAgIngtYXBpLWtleTogeyRldHN5RGF0YVsnY2xpZW50X2lkJ119IgogICAgICAgICAgICBdKTsKICAgICAgICAgICAgJHJlc3BvbnNlID0gY3VybF9leGVjKCRjaCk7CiAgICAgICAgICAgICRodHRwQ29kZSA9IGN1cmxfZ2V0aW5mbygkY2gsIENVUkxJTkZPX0hUVFBfQ09ERSk7CiAgICAgICAgICAgICRjdXJsRXJyb3IgPSBjdXJsX2Vycm9yKCRjaCk7CiAgICAgICAgICAgIGlmICgkaHR0cENvZGUgPT09IDIwMCkgewogICAgICAgICAgICAgICAgJGRhdGEgPSBqc29uX2RlY29kZSgkcmVzcG9uc2UsIHRydWUpOwogICAgICAgICAgICAgICAgJGV0c3lEYXRhWydhY2Nlc3NfdG9rZW4nXSA9ICRkYXRhWydhY2Nlc3NfdG9rZW4nXTsKICAgICAgICAgICAgICAgICRldHN5RGF0YVsncmVmcmVzaF90b2tlbiddID0gJGRhdGFbJ3JlZnJlc2hfdG9rZW4nXTsKICAgICAgICAgICAgICAgICRldHN5RGF0YVsnZXhwaXJlc19pbiddID0gJGRhdGFbJ2V4cGlyZXNfaW4nXTsKICAgICAgICAgICAgICAgICRldHN5RGF0YVsnY3JlYXRlZF9hdCddID0gdGltZSgpOwogICAgICAgICAgICAgICAgZWNobyAiQWNjZXNzIHRva2VuIHJlZnJlc2hlZC5cbiI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBlY2hvICJFcnJvciByZWZyZXNoaW5nIHRva2VuOiAkaHR0cENvZGVcbiI7CiAgICAgICAgICAgICAgICBlY2hvICJSZXNwb25zZTogJHJlc3BvbnNlXG4iOwogICAgICAgICAgICAgICAgZWNobyAiY1VSTCBlcnJvcjogJGN1cmxFcnJvclxuIjsKICAgICAgICAgICAgICAgIGV4aXQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY3VybF9jbG9zZSgkY2gpOwogICAgICAgIH0KICAgICAgICBmaWxlX3B1dF9jb250ZW50cygiZXRzeV97JHNob3BJZH0uanNvbiIsIGpzb25fZW5jb2RlKCRldHN5RGF0YSwgSlNPTl9QUkVUVFlfUFJJTlQpKTsKICAgIH0KfQoKLy8gRnVuY3Rpb24gdG8gbWFrZSBhdXRoZW50aWNhdGVkIHJlcXVlc3RzCmZ1bmN0aW9uIG1ha2VSZXF1ZXN0KCRlbmRwb2ludCwgJHNob3BJZCkgewogICAgJGV0c3lEYXRhID0ganNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoImV0c3lfeyRzaG9wSWR9Lmpzb24iKSwgdHJ1ZSk7CiAgICAkYWNjZXNzVG9rZW4gPSAkZXRzeURhdGFbJ2FjY2Vzc190b2tlbiddOwogICAgJGFwaVVybCA9ICJodHRwczovL29wZW5hcGkuZXRzeS5jb20vdjMvYXBwbGljYXRpb24veyRlbmRwb2ludH0iOwogICAgJGNoID0gY3VybF9pbml0KCk7CiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAkYXBpVXJsKTsKICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7CiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgWwogICAgICAgICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJGFjY2Vzc1Rva2VuIiwKICAgICAgICAieC1hcGkta2V5OiB7JGV0c3lEYXRhWydjbGllbnRfaWQnXX0iCiAgICBdKTsKICAgICRyZXNwb25zZSA9IGN1cmxfZXhlYygkY2gpOwogICAgJGh0dHBDb2RlID0gY3VybF9nZXRpbmZvKCRjaCwgQ1VSTElORk9fSFRUUF9DT0RFKTsKICAgIGN1cmxfY2xvc2UoJGNoKTsKICAgIGlmICgkaHR0cENvZGUgPT09IDIwMCkgewogICAgICAgICRkYXRhID0ganNvbl9kZWNvZGUoJHJlc3BvbnNlLCB0cnVlKTsKICAgICAgICByZXR1cm4gJGRhdGE7CiAgICB9IGVsc2UgewogICAgICAgIGVjaG8gIkVycm9yOiAkaHR0cENvZGVcbiI7CiAgICAgICAgZWNobyAiUmVzcG9uc2U6ICRyZXNwb25zZVxuIjsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KfQoKZnVuY3Rpb24gZ2V0VXNlckRldGFpbHMoJHNob3BJZCkgewogICAgJGV0c3lEYXRhID0ganNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoImV0c3lfeyRzaG9wSWR9Lmpzb24iKSwgdHJ1ZSk7CiAgICAkYWNjZXNzVG9rZW4gPSAkZXRzeURhdGFbJ2FjY2Vzc190b2tlbiddOwogICAgJGFwaVVybCA9ICJodHRwczovL29wZW5hcGkuZXRzeS5jb20vdjMvYXBwbGljYXRpb24vdXNlcnMvbWUiOwogICAgJGNoID0gY3VybF9pbml0KCk7CiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAkYXBpVXJsKTsKICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7CiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgWwogICAgICAgICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJGFjY2Vzc1Rva2VuIiwKICAgICAgICAieC1hcGkta2V5OiB7JGV0c3lEYXRhWydjbGllbnRfaWQnXX0iCiAgICBdKTsKICAgICRyZXNwb25zZSA9IGN1cmxfZXhlYygkY2gpOwogICAgJGh0dHBDb2RlID0gY3VybF9nZXRpbmZvKCRjaCwgQ1VSTElORk9fSFRUUF9DT0RFKTsKICAgIGN1cmxfY2xvc2UoJGNoKTsKICAgIGlmICgkaHR0cENvZGUgPT09IDIwMCkgewogICAgICAgICRkYXRhID0ganNvbl9kZWNvZGUoJHJlc3BvbnNlLCB0cnVlKTsKICAgICAgICByZXR1cm4gJGRhdGE7CiAgICB9IGVsc2UgewogICAgICAgIGVjaG8gIkVycm9yOiAkaHR0cENvZGVcbiI7CiAgICAgICAgZWNobyAiUmVzcG9uc2U6ICRyZXNwb25zZVxuIjsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KfQoKZnVuY3Rpb24gZ2V0QWN0aXZlTGlzdGluZ3MoJHNob3BJZCkgewogICAgJGFsbExpc3RpbmdzID0gW107CiAgICAkbGltaXQgPSAxMDA7CiAgICAkb2Zmc2V0ID0gMDsKICAgIGRvIHsKICAgICAgICAkcmVzcG9uc2UgPSBtYWtlUmVxdWVzdCgic2hvcHMveyRzaG9wSWR9L2xpc3RpbmdzL2FjdGl2ZT9saW1pdD17JGxpbWl0fSZvZmZzZXQ9eyRvZmZzZXR9IiwgJHNob3BJZCk7CiAgICAgICAgaWYgKCRyZXNwb25zZSAmJiBpc3NldCgkcmVzcG9uc2VbJ3Jlc3VsdHMnXSkpIHsKICAgICAgICAgICAgZm9yZWFjaCAoJHJlc3BvbnNlWydyZXN1bHRzJ10gYXMgJGxpc3RpbmcpIHsKICAgICAgICAgICAgICAgICRsaXN0aW5nWydpbnZlbnRvcnknXSA9IGdldExpc3RpbmdJbnZlbnRvcnkoJGxpc3RpbmdbJ2xpc3RpbmdfaWQnXSwgJHNob3BJZCk7CiAgICAgICAgICAgICAgICAkbGlzdGluZ1snaW1hZ2VzJ10gPSBnZXRMaXN0aW5nSW1hZ2VzKCRsaXN0aW5nWydsaXN0aW5nX2lkJ10sICRzaG9wSWQpOwogICAgICAgICAgICAgICAgJGxpc3RpbmdbJ3ZhcmlhdGlvbl9pbWFnZXMnXSA9IGdldFZhcmlhdGlvbkltYWdlcygkbGlzdGluZ1snbGlzdGluZ19pZCddLCAkc2hvcElkKTsKICAgICAgICAgICAgICAgICRhbGxMaXN0aW5nc1tdID0gJGxpc3Rpbmc7CiAgICAgICAgICAgICAgICB1c2xlZXAoMTAwMDAwKTsKICAgICAgICAgICAgICAgIGVjaG8gIi4iOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRvZmZzZXQgKz0gJGxpbWl0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICB1c2xlZXAoNTAwMDAwKTsKICAgICAgICBlY2hvICJEIjsKICAgIH0gd2hpbGUgKCRvZmZzZXQgPCAkcmVzcG9uc2VbJ2NvdW50J10pOwogICAgZWNobyAiXG4iOwogICAgcmV0dXJuICRhbGxMaXN0aW5nczsKfQoKZnVuY3Rpb24gZ2V0TGlzdGluZ0ludmVudG9yeSgkbGlzdGluZ0lkLCAkc2hvcElkKSB7CiAgICAkcmVzcG9uc2UgPSBtYWtlUmVxdWVzdCgibGlzdGluZ3MveyRsaXN0aW5nSWR9L2ludmVudG9yeSIsICRzaG9wSWQpOwogICAgaWYgKCRyZXNwb25zZSAmJiBpc3NldCgkcmVzcG9uc2VbJ3Byb2R1Y3RzJ10pKSB7CiAgICAgICAgcmV0dXJuICRyZXNwb25zZVsncHJvZHVjdHMnXTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9CgpmdW5jdGlvbiBnZXRMaXN0aW5nSW1hZ2VzKCRsaXN0aW5nSWQsICRzaG9wSWQpIHsKICAgICRyZXNwb25zZSA9IG1ha2VSZXF1ZXN0KCJsaXN0aW5ncy97JGxpc3RpbmdJZH0vaW1hZ2VzIiwgJHNob3BJZCk7CiAgICBpZiAoJHJlc3BvbnNlICYmIGlzc2V0KCRyZXNwb25zZVsncmVzdWx0cyddKSkgewogICAgICAgIHJldHVybiAkcmVzcG9uc2VbJ3Jlc3VsdHMnXTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9CgpmdW5jdGlvbiBnZXRWYXJpYXRpb25JbWFnZXMoJGxpc3RpbmdJZCwgJHNob3BJZCkgewogICAgJHJlc3BvbnNlID0gbWFrZVJlcXVlc3QoInNob3BzL3skc2hvcElkfS9saXN0aW5ncy97JGxpc3RpbmdJZH0vdmFyaWF0aW9uLWltYWdlcyIsICRzaG9wSWQpOwogICAgaWYgKCRyZXNwb25zZSAmJiBpc3NldCgkcmVzcG9uc2VbJ3Jlc3VsdHMnXSkpIHsKICAgICAgICByZXR1cm4gJHJlc3BvbnNlWydyZXN1bHRzJ107CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfQoKZnVuY3Rpb24gc3VibWl0RmlsZSgkc2hvcElkKSB7CiAgICAkZmlsZSA9ICdjOi9waHAvZXRzeV9saXN0aW5ncy5qc29uJzsKICAgICRyZW1vdGVVcmwgPSAnJzsgLy8gVVJMIHRvIHN1Ym1pdCB0aGUgZmlsZSB0bwogICAgJHBvc3REYXRhID0gWwogICAgICAgICdmaWxlJyA9PiBuZXcgQ1VSTEZpbGUoJGZpbGUpLAogICAgICAgICdzaG9wX2lkJyA9PiAkc2hvcElkCiAgICBdOwogICAgJHQgPSAwOwogICAgZG8geyAgIAogICAgICAgICR0Kys7ICAgICAgICAgCiAgICAgICAgJGNoID0gY3VybF9pbml0KCk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1VSTCwgJHJlbW90ZVVybCk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1QsIDEpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NURklFTERTLCAkcG9zdERhdGEpOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgdHJ1ZSk7CiAgICAgICAgJHJlc3BvbnNlID0gY3VybF9leGVjKCRjaCk7CiAgICAgICAgJGh0dHBDb2RlID0gY3VybF9nZXRpbmZvKCRjaCwgQ1VSTElORk9fSFRUUF9DT0RFKTsKICAgICAgICBpZiAoJHJlc3BvbnNlID09PSBmYWxzZSB8fCAkaHR0cENvZGUgPj0gNTAwKSB7CiAgICAgICAgICAgICRlcnJvciA9IGN1cmxfZXJyb3IoJGNoKTsKICAgICAgICAgICAgY3VybF9jbG9zZSgkY2gpOwogICAgICAgICAgICBlY2hvICJjVVJMIGVycm9yOiAkZXJyb3JcbiI7CiAgICAgICAgICAgIGlmICgkdCA+IDEwKSB7CiAgICAgICAgICAgICAgICBlY2hvICJHaXZpbmcgdXAuXG4iOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNsZWVwKCR0KjYwKTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY3VybF9jbG9zZSgkY2gpOwogICAgICAgIH0KICAgICAgICBpZiAoJGh0dHBDb2RlID49IDIwMCAmJiAkaHR0cENvZGUgPCAzMDApIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlaWYgKCRodHRwQ29kZSA+PSA0MDAgJiYgJGh0dHBDb2RlIDwgNTAwKSB7CiAgICAgICAgICAgIGVjaG8gIkNsaWVudCBlcnJvcjogJGh0dHBDb2RlLiBQbGVhc2UgY2hlY2sgdGhlIHJlcXVlc3QuXG4iOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfSB3aGlsZSAodHJ1ZSk7Cn0KCmZ1bmN0aW9uIGV4ZWN1dGUoJHNob3BJZCkgewogICAgaWYgKGZpbGVfZXhpc3RzKCJldHN5X2xpc3RpbmdzLmpzb24iKSAmJiB0aW1lKCkgLSBmaWxlbXRpbWUoImV0c3lfbGlzdGluZ3MuanNvbiIpIDwgODY0MDApIHsKICAgICAgICBlY2hvICJMaXN0aW5ncyBhcmUgdXAgdG8gZGF0ZS5cbiI7CiAgICB9IGVsc2UgewogICAgICAgIGVjaG8gIlJlZnJlc2hpbmcgbGlzdGluZ3MuLi5cbiI7CiAgICAgICAgJGFjdGl2ZUxpc3RpbmdzID0gZ2V0QWN0aXZlTGlzdGluZ3MoJHNob3BJZCk7CiAgICAgICAgZWNobyBjb3VudCgkYWN0aXZlTGlzdGluZ3MpIC4gIiBhY3RpdmUgbGlzdGluZ3MgZm91bmQuXG4iOwogICAgICAgIGZpbGVfcHV0X2NvbnRlbnRzKCJldHN5X2xpc3RpbmdzLmpzb24iLCBqc29uX2VuY29kZSgkYWN0aXZlTGlzdGluZ3MsIEpTT05fUFJFVFRZX1BSSU5UKSk7CiAgICB9CiAgICBpZiAoc3VibWl0RmlsZSgkc2hvcElkKSkgewogICAgICAgIGVjaG8gIkZpbGUgc3VibWl0dGVkIHN1Y2Nlc3NmdWxseS5cbiI7CiAgICB9IGVsc2UgewogICAgICAgIGVjaG8gIkVycm9yIHN1Ym1pdHRpbmcgZmlsZS5cbiI7CiAgICB9Cn0KCiRzaG9wSWQgPSBbCiAgICAnaXdhJyA9PiBbCiAgICAgICAgJ3VzZXJfaWQnID0+ICcnLAogICAgICAgICdzaG9wX2lkJyA9PiAnJywKICAgIF0sCl07CgppZiAoaXNzZXQoJGFyZ3ZbMV0pICYmIGFycmF5X2tleV9leGlzdHMoJGFyZ3ZbMV0sICRzaG9wSWQpKSB7CiAgICAkYWN0aXZlU2hvcCA9ICRzaG9wSWRbJGFyZ3ZbMV1dWydzaG9wX2lkJ107Cn0gZWxzZSB7CiAgICBlY2hvICJObyB2YWxpZCBzaG9wIElEIHByb3ZpZGVkLiBEbyB5b3Ugd2FudCB0byBjb250aW51ZSB3aXRoIGEgYmxhbmsgSUQ/ICh5L24pOiAiOwogICAgJGhhbmRsZSA9IGZvcGVuKCJwaHA6Ly9zdGRpbiIsICJyIik7CiAgICAkcmVzcG9uc2UgPSB0cmltKGZnZXRzKCRoYW5kbGUpKTsKCiAgICBpZiAoc3RydG9sb3dlcigkcmVzcG9uc2UpICE9PSAneScpIHsKICAgICAgICBlY2hvICJPcGVyYXRpb24gYWJvcnRlZC5cbiI7CiAgICAgICAgZXhpdDsKICAgIH0KCiAgICAkYWN0aXZlU2hvcCA9ICIiOwp9Cgppbml0KCRhY3RpdmVTaG9wKTsKJHVzZXJEZXRhaWxzID0gZ2V0VXNlckRldGFpbHMoJGFjdGl2ZVNob3ApOwpwcmludF9yKCR1c2VyRGV0YWlscyk7CgpleGVjdXRlKCRhY3RpdmVTaG9wKTsKCiovIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGRvY0Jsb2NrIjtOO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";